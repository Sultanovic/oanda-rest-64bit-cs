{"name":"oanda-rest-cs","tagline":"Oanda REST api wrapper for C# (http://www.oanda.com/)","body":"#Welcome to Rabun wrapper for OANDA REST API\r\n\r\n![Title img](/RoboTrade.png)\r\n\r\nHi! We offer you to use our wrapper for the oanda rest api in C#. \r\nWe tried to implement most of the features of oanda rest api and \r\nprovide you with a convenient C# interface.\r\n\r\nBelow you will find a detailed description of working with our wrapper.\r\n\r\n#Support tech\r\n\r\nThis is a portable .NET library. You can use it with: Windows 8/10, Windows Phone,\r\nWPF, ASP.NET, Windows Forms.\r\n\r\nWARNING! This library doesn't support Windows 10 Universal App now. Windows Universal App support coming soon.\r\n\r\n#How to install library\r\n\r\nYou can build the library or download the package using nuget. You need Visual Studio\r\n2013 or later.\r\n\r\n###Build library from source\r\n\r\nGet source code from github. You can use release (stable version) or master branch\r\nwith latest futures, but master sourse may not work.\r\n\r\nOpen solution at your Visual Studio and run build. All projects must build success.\r\n\r\n###Get library from NuGet package\r\n\r\nOpen NuGet Package Manager console at your Visual Studio and run this command:\r\n\r\n```\r\nPM> Install-Package Rabun.Oanda.Rest.Cs\r\n```\r\n\r\n### Tests\r\n\r\nYou can run Integration and Unit tests. WARNING! You can use own account information:\r\nsecuriry key, accountId. Don't forget change Asserts at tests for your trading.\r\n\r\n#How to use it\r\n\r\nTo start working with services OANDA you need to create an instance of the class \r\nxxxEndpoints. Where xxx is the name of the operations you want to perform.\r\n\r\nYou can use Endpoints class:\r\n\r\n```csharp\r\nOrderEndpoints orderEndpoints = new OrderEndpoints(\"ec89b162d4a9922c8fa40769c2453d8b-cc1fb522857d46a08a90ef09730343a6\", AccountType.practice, 4905675);\r\nList<Order> orders = await orderEndpoints.GetOrders();\r\n```\r\n\r\nor use fabric:\r\n\r\n```csharp\r\nDefaultFactory factory = new DefaultFactory(\"ec89b162d4a9922c8fa40769c2453d8b-cc1fb522857d46a08a90ef09730343a6\", AccountType.practice, 4905675);\r\nRateEndpoints rateEndpoints = factory.GetEndpoint<RateEndpoints>();\r\n\r\nList<Price> prices = await rateEndpoints.GetPrices(\"EUR_USD\");\r\n```\r\n\r\nThe DefaultFactory provide instances for all xxxEndpoints. Using Factory pattern is\r\nthe best way to work with this api.\r\n\r\n#Implementation\r\n\r\nNow implement these services:\r\n* OrderEndpoints\r\n* PositionEndpoints\r\n* RateEndpoints\r\n* TradeEndpoints\r\n* TransactionEndpoints\r\n\r\nMore information about this services you can find at http://developer.oanda.com/rest-live/introduction/\r\n\r\n#Examples\r\n\r\n##Orders\r\n\r\n#####GetOrders\r\n\r\n```csharp\r\nList<Order> orders = await _orderEndpoints.GetOrders();\r\n```\r\n\r\n```csharp\r\nList<Order> orders = await _orderEndpoints.GetOrders(\"EUR_USD\");\r\n```\r\n\r\n```csharp\r\nList<Order> orders = await _orderEndpoints.GetOrders(\"EUR_USD\", 5);\r\n```\r\n\r\n```csharp\r\nList<Order> orders = await _orderEndpoints.GetOrders(\"EUR_USD\", 5, null, null);\r\n```\r\n\r\n#####GetOrder\r\n\r\n```csharp\r\nOrder order = await _orderEndpoints.GetOrder(965436841);\r\n```\r\n\r\n#####CreateOrder\r\n\r\n```csharp\r\nOrderOpen order = await _orderEndpoints.CreateOrder(\"EUR_USD\", 777, OandaTypes.Side.buy, OandaTypes.OrderType.marketIfTouched, DateTime.Now.AddDays(1), 1.1630f, null, null, null, null);\r\n```\r\n\r\n```csharp\r\nOrderOpen order = await _orderEndpoints.CreateMarketOrder(\"EUR_USD\", 999, OandaTypes.Side.buy);\r\n```\r\n\r\n```csharp\r\nOrderOpen order = await _orderEndpoints.CreateMarketIfTouchedOrder(\"EUR_USD\", 999, OandaTypes.Side.buy, DateTime.Now.AddDays(1), 1.4f);\r\n```\r\n\r\n#####UpdateOrder\r\n\r\n```csharp\r\nOrderMarketIfTouched order = await _orderEndpoints.UpdateOrder(965436841, 333, 1.1f, null, null, null, null, null, null);\r\n```\r\n\r\n#####CloseOrder\r\n\r\n```csharp\r\nOrderClosed order = await _orderEndpoints.CloseOrder(965875303);\r\n```\r\n\r\n##Rates\r\n\r\n#####GetInstruments\r\n\r\n```csharp\r\nList<InstrumentModel> instruments = await _rateEndpoints.GetInstruments();\r\n```\r\n\r\n```csharp\r\nList<InstrumentModel> instruments = await _rateEndpoints.GetInstruments(\"EUR_USD,CHF_JPY\");\r\n```\r\n\r\n```csharp\r\nList<InstrumentModel> instruments = await _rateEndpoints.GetInstruments(\"instrument\", \"EUR_USD\");\r\n```\r\n\r\n#####GetPrices\r\n\r\n```csharp\r\nList<Price> prices = await _rateEndpoints.GetPrices(\"EUR_USD,CHF_JPY\");\r\n```\r\n\r\n#####GetCandles\r\n\r\n```csharp\r\nCandle<CandleBidAsk> candle = await _rateEndpoints.GetCandles(\"EUR_USD\");\r\n```\r\n\r\n```csharp\r\nCandle<CandleBidAsk> candle = await _rateEndpoints.GetCandles(\"EUR_USD\", OandaTypes.GranularityType.D);\r\n```\r\n\r\n```csharp\r\nCandle<CandleBidAsk> candle = await _rateEndpoints.GetCandles(\"EUR_USD\", OandaTypes.GranularityType.M, 10);\r\n```\r\n\r\n```csharp\r\nDateTime start = DateTime.UtcNow.AddDays(-1);\r\nDateTime end = DateTime.UtcNow;\r\n\r\nCandle<CandleBidAsk> candle = await _rateEndpoints.GetCandles(\"EUR_USD\", OandaTypes.GranularityType.H1, start, end);\r\n```\r\n\r\n```csharp\r\nCandle<CandleMid> candle = await _rateEndpoints.GetCandlesMid(\"EUR_USD\");\r\n```\r\n\r\n```csharp\r\nCandle<CandleMid> candle = await _rateEndpoints.GetCandlesMid(\"EUR_USD\", OandaTypes.GranularityType.D);\r\n```\r\n\r\n```csharp\r\nCandle<CandleMid> candle = await _rateEndpoints.GetCandlesMid(\"EUR_USD\", OandaTypes.GranularityType.M, 10);\r\n```\r\n\r\n```csharp\r\nDateTime start = DateTime.UtcNow.AddDays(-1);\r\nDateTime end = DateTime.UtcNow;\r\n\r\nCandle<CandleMid> candle = await _rateEndpoints.GetCandlesMid(\"EUR_USD\", OandaTypes.GranularityType.H1, start, end);\r\n```\r\n\r\n```csharp\r\nobject candle =\r\n    await\r\n        _rateEndpoints.GetCandles(\"EUR_USD\", OandaTypes.GranularityType.M, 100,\r\n            OandaTypes.CandleFormat.bidask,\r\n            true, null, OandaTypes.WeeklyAlignment.Friday);\r\n```\r\n\r\n```csharp\r\nDateTime start = DateTime.UtcNow.AddDays(-1);\r\nDateTime end = DateTime.UtcNow;\r\n\r\nobject candle =\r\n    await\r\n        _rateEndpoints.GetCandles(\"EUR_USD\", OandaTypes.GranularityType.M, start, end,\r\n            OandaTypes.CandleFormat.midpoint,\r\n            true, null, OandaTypes.WeeklyAlignment.Friday);\r\n```\r\n\r\n##Trades\r\n\r\n#####GetTrades\r\n\r\n```csharp\r\nList<Trade> trades = await _tradeEndpoints.GetTrades();\r\n```\r\n\r\n```csharp\r\nList<Trade> trades = await _tradeEndpoints.GetTrades(\"EUR_USD\");\r\n```\r\n\r\n```csharp\r\nList<Trade> trades = await _tradeEndpoints.GetTrades(\"EUR_USD\", 100);\r\n```\r\n\r\n```csharp\r\nList<Trade> trades = await _tradeEndpoints.GetTrades(\"EUR_USD\", 100, null, null);\r\n```\r\n\r\n#####GetTrade\r\n\r\n```csharp\r\nTrade trade = await _tradeEndpoints.GetTrade(968541259);\r\n```\r\n\r\n#####UpdateTrade\r\n\r\n```csharp\r\nTrade trade = await _tradeEndpoints.UpdateTrade(968541259, null, 1.29f, null);\r\n```\r\n\r\n#####CloseTrade\r\n\r\n```csharp\r\nTradeClosed trade = await _tradeEndpoints.CloseTrade(968541259);\r\n```\r\n\r\n##Positions\r\n\r\n#####GetPositions\r\n\r\n```csharp\r\nList<Position> positions = await _positionEndpoints.GetPositions();\r\n```\r\n\r\n#####GetPosition\r\n\r\n```csharp\r\nPosition position = await _positionEndpoints.GetPosition(\"EUR_USD\");\r\n```\r\n\r\n#####ClosePosition\r\n\r\n```csharp\r\nPositionClosed position = await _positionEndpoints.ClosePosition(\"EUR_USD\");\r\n```\r\n\r\n##Transactions\r\n\r\n#####GetTransactions\r\n\r\n```csharp\r\nList<Transaction> transactions = await _transactionEndpoints.GetTransactions(null, null, null, \"EUR_USD\", \"\");\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}